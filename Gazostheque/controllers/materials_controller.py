from datetime import datetime
import qrcode, io, os, json, base64, uuid

from django.conf import settings
from django.http.response import JsonResponse
from django.shortcuts import get_object_or_404

from Gazostheque.models.material_model import Materials
from Gazostheque.serializers import MaterialSerializer

from rest_framework import status

from django.utils.dateparse import parse_datetime



def get_material(pk):
    """
    Function to return a material instance given a primary key.
    """
    return Materials.objects.get(pk=pk)

def generate_qrcode(device_id, device_name, team):
    """
    Function to generate material qrcode.

    Args:
        device_id (int): the equipment id
        device_name (str): (optional) material name in string format
        team (str): (optional) team of the owner in string format

    Returns:
        qr_img_bytes: returns generated bytes representing the blob of the qrcode to be stored.
    """

    # Create a link to a web page with the material details
    webpage_link = f"https://liphy-gazotheque.univ-grenoble-alpes.fr/gazostheque/public/{device_id}"

    # Generate the qrcode with the link
    # qr = qrcode.QRCode(version=1, error_correction=qrcode.constants.ERROR_CORRECT_L, box_size=10, border=14)
    qr = qrcode.QRCode(version=1, error_correction=qrcode.constants.ERROR_CORRECT_L, box_size=20, border=14)
    qr.add_data(webpage_link)  
    qr.make(fit=True)
    
    # Converting to an image
    qr_img = qr.make_image(fill_color="black", back_color="white")

    # Save QR code image to a BytesIO object
    qr_img_bytes = io.BytesIO()
    qr_img.save(qr_img_bytes, format='PNG')
    qr_img_bytes.seek(0)

    return qr_img_bytes

def on_create_material(request):
    """
    Function to create a new instance of material.

    Args:
        request (obj) : An oject with the necessary information to create a new material object

    Returns:
       (json): returns the newly created material instance or an error.
    """
    # Retrieve the data posted before accessing the files (need to access POST before FILES)
    mutable_data = request.POST.copy()

    # Get tags from request
    tags = request.POST.getlist('tags', [])
    
    # Serializing the data
    material_serializer = MaterialSerializer(data=mutable_data)
    
    # Validating the serialized data
    if material_serializer.is_valid():
        try:
            created_instance = material_serializer.save() # saving instance
        except Exception as e:
            print(e)
        
        # Qrcode generation with the created instance, needed in this order to access the new id
        img = generate_qrcode(
            created_instance.material_id,
            created_instance.material_title,
            created_instance.team
        )
        
        # Assigning the qrcode to the instance and saving
        encoded_img =  base64.b64encode(img.getvalue()).decode('utf-8')
        created_instance.qrcode = encoded_img
        created_instance.save()

        # Re-serialize after updating with QR code
        updated_serializer = MaterialSerializer(created_instance)
        
        # Returning the created material data
        return JsonResponse(updated_serializer.data, status=status.HTTP_201_CREATED) 
    
    print(material_serializer.errors)
    # Returning an error when the serialized data is not valid
    return JsonResponse(material_serializer.errors, status=status.HTTP_400_BAD_REQUEST) 



def get_detailed_material(pk):
    """
    Function to return a list of detailed information related to a list of materials.

    Args:
        pk (int) : The id of the material instance 

    Returns:
       detailed_materials (obj): A list of information related to the material instance.
    """
    material = get_object_or_404(Materials.objects.select_related('owner__user'), pk=pk)
    detailed_materials = MaterialSerializer(material).data
    owner = material.owner
    user = owner.user
    # tags_list = [{'tag_id': tag.tag_id, 'markup': tag.markup} for tag in material.tags.all()]
    
    detailed_materials['owner_details'] = {
        "owner_id": owner.owner_id,
        "contact": owner.contact,
        "user_id": user.user_id,
        "first_name": user.first_name,
        "last_name": user.last_name,
        "email": user.email
    }
    
    # Include tags in the response
    detailed_materials['tags'] = list(material.tags.names())

    return detailed_materials